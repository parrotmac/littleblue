// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
)

type BuildJobStatus string

const (
	BuildJobStatusUnknown        BuildJobStatus = "Unknown"
	BuildJobStatusCreated        BuildJobStatus = "Created"
	BuildJobStatusPending        BuildJobStatus = "Pending"
	BuildJobStatusCloning        BuildJobStatus = "Cloning"
	BuildJobStatusPreparingBuild BuildJobStatus = "PreparingBuild"
	BuildJobStatusBuilding       BuildJobStatus = "Building"
	BuildJobStatusPushing        BuildJobStatus = "Pushing"
	BuildJobStatusComplete       BuildJobStatus = "Complete"
)

var AllBuildJobStatus = []BuildJobStatus{
	BuildJobStatusUnknown,
	BuildJobStatusCreated,
	BuildJobStatusPending,
	BuildJobStatusCloning,
	BuildJobStatusPreparingBuild,
	BuildJobStatusBuilding,
	BuildJobStatusPushing,
	BuildJobStatusComplete,
}

func (e BuildJobStatus) IsValid() bool {
	switch e {
	case BuildJobStatusUnknown, BuildJobStatusCreated, BuildJobStatusPending, BuildJobStatusCloning, BuildJobStatusPreparingBuild, BuildJobStatusBuilding, BuildJobStatusPushing, BuildJobStatusComplete:
		return true
	}
	return false
}

func (e BuildJobStatus) String() string {
	return string(e)
}

func (e *BuildJobStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BuildJobStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BuildJobStatus", str)
	}
	return nil
}

func (e BuildJobStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CloneStrategy string

const (
	CloneStrategyGitSSH   CloneStrategy = "GIT_SSH"
	CloneStrategyGitHTTPS CloneStrategy = "GIT_HTTPS"
)

var AllCloneStrategy = []CloneStrategy{
	CloneStrategyGitSSH,
	CloneStrategyGitHTTPS,
}

func (e CloneStrategy) IsValid() bool {
	switch e {
	case CloneStrategyGitSSH, CloneStrategyGitHTTPS:
		return true
	}
	return false
}

func (e CloneStrategy) String() string {
	return string(e)
}

func (e *CloneStrategy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CloneStrategy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CloneStrategy", str)
	}
	return nil
}

func (e CloneStrategy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SourceProvider string

const (
	SourceProviderGithub SourceProvider = "Github"
)

var AllSourceProvider = []SourceProvider{
	SourceProviderGithub,
}

func (e SourceProvider) IsValid() bool {
	switch e {
	case SourceProviderGithub:
		return true
	}
	return false
}

func (e SourceProvider) String() string {
	return string(e)
}

func (e *SourceProvider) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SourceProvider(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SourceProvider", str)
	}
	return nil
}

func (e SourceProvider) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
